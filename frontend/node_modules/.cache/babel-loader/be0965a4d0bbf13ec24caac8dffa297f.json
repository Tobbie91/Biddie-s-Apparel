{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/Desktop/mern-amazona/frontend/src/screens/MapScreen.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport Button from 'react-bootstrap/Button';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nconst libs = ['places'];\nexport default function MapScreen() {\n  _s();\n\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await axios('/api/keys/google', {\n        headers: {\n          Authorization: `BEARER ${userInfo.token}`\n        }\n      });\n      setGoogleApiKey(data.key);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON'\n    });\n  }, [ctxDispatch]);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id\n      }\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-box\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapScreen, \"tH02IKR5jF0yL2d3j48WCjJosTQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MapScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"sources":["/Users/decagon/Desktop/mern-amazona/frontend/src/screens/MapScreen.js"],"names":["axios","React","useContext","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","useNavigate","Store","Button","toast","defaultLocation","lat","lng","libs","MapScreen","state","dispatch","ctxDispatch","userInfo","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","getUserCurrentLocation","navigator","geolocation","alert","getCurrentPosition","position","coords","latitude","longitude","fetch","data","headers","Authorization","token","key","type","onLoad","map","current","onIdle","onLoadPlaces","place","onPlacesChanged","getPlaces","geometry","onMarkerLoad","marker","onConfirm","places","payload","address","formatted_address","name","vicinity","googleAddressId","id","success","height","width"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  LoadScript,\n  GoogleMap,\n  StandaloneSearchBox,\n  Marker,\n} from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport Button from 'react-bootstrap/Button';\nimport { toast } from 'react-toastify';\n\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\nconst libs = ['places'];\n\nexport default function MapScreen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await axios('/api/keys/google', {\n        headers: { Authorization: `BEARER ${userInfo.token}` },\n      });\n      setGoogleApiKey(data.key);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON',\n    });\n  }, [ctxDispatch]);\n\n  const onLoad = (map) => {\n    mapRef.current = map;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n\n  const onLoadPlaces = (place) => {\n    placeRef.current = place;\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n\n  const onMarkerLoad = (marker) => {\n    markerRef.current = marker;\n  };\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id,\n      },\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n  return (\n    <div className=\"full-box\">\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"smaple-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className=\"map-input-box\">\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <Button type=\"button\" onClick={onConfirm}>\n                Confirm\n              </Button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}